@page "/ScatterChart"
@inherits Microsoft.AspNetCore.Components.ComponentBase

@using ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.ChartJS.Common.Utils
@using ChartJs.Blazor.Sample.Shared.Components
@using ChartJs.Blazor.ChartJS.ScatterChart
@using Newtonsoft.Json

<h2>Scatter Chart</h2>
<div class="row">
    <button class="btn btn-primary" onclick="@UpdateChart">Update Chart </button>
</div>

<ChartJsScatterChart ref="scatterChartJs" Config="@scatterChartConfig" Width="600" Height="300" />

<DataSetDisplay ref="_dataSetDisplay" bind-DataSetsStr="@DataSetsStr" Width="600" Height="300" />

@functions{


    ScatterChartConfig scatterChartConfig { get; set; }
    ChartJsScatterChart scatterChartJs;

    DataSetDisplay _dataSetDisplay;

    string DataSetsStr
    {
        get => JsonConvert.SerializeObject(scatterChartConfig.Data.Datasets, Formatting.Indented);
        set
        {
            scatterChartConfig.Data.Datasets = JsonConvert.DeserializeObject<List<ScatterConfigDataset>>(value);
            Console.WriteLine(JsonConvert.SerializeObject(scatterChartConfig.Data.Datasets));
        }
    }

    protected override void OnInit()
    {
        var points = new List<Point>();
        points.Add(PointUtil.NewRandPoint(-10, 10, -10, 10));
        points.Add(PointUtil.NewRandPoint(-10, 10, -10, 10));
        points.Add(PointUtil.NewRandPoint(-10, 10, -10, 10));
        points.Add(PointUtil.NewRandPoint(-10, 10, -10, 10));

        scatterChartConfig = scatterChartConfig ?? new ScatterChartConfig
        {
            CanvasId = "myFirstScatterChart",
            Options = new ScatterConfigOptions
            {
                Title = new OptionsTitle { Display = true, Text = "Scatter Chart" },
                Responsive = true
            },
            Data = new ScatterConfigData
            {
                Datasets = new List<ScatterConfigDataset>
            {
                new ScatterConfigDataset
                {
                    Label = "First dataset",
                    BorderColor = "rgba(80,80,235,0.6)",
                    BackgroundColor = "rgba(80,80,235,0.6)",
                    BorderWidth = 3,
                    PointRadius = 5,
                    PointHitRadius = 5,
                    Data = points,
                    ShowLine = false
                },
                new ScatterConfigDataset
                {
                    Label = "Second dataset",
                    BorderColor = "rgba(80,234,80,0.6)",
                    BackgroundColor = "rgba(80,234,80,0.6)",
                    BorderWidth = 3,
                    PointRadius = 5,
                    PointHitRadius = 5,
                    ShowLine = true,
                    Data = new List<Point>
                    {
                        PointUtil.NewRandPoint(-10, 10, -10, 10),
                        PointUtil.NewRandPoint(-10, 10, -10, 10),
                        PointUtil.NewRandPoint(-10, 10, -10, 10),
                        PointUtil.NewRandPoint(-10, 10, -10, 10)
                    }
                },
                new ScatterConfigDataset
                {
                    Label = "Third dataset",
                    BorderColor = "rgba(234,80,80,0.6)",
                    BackgroundColor = "rgba(234,80,80,0.6)",
                    BorderWidth = 3,
                    PointRadius = 5,
                    PointHitRadius = 5,
                    ShowLine = false,
                    Data = new List<Point>
                    {
                        PointUtil.NewRandPoint(-10, 10, -10, 10),
                        PointUtil.NewRandPoint(-10, 10, -10, 10),
                        PointUtil.NewRandPoint(-10, 10, -10, 10),
                        PointUtil.NewRandPoint(-10, 10, -10, 10)
                    }
                }
            }
            }
        };
    }

    protected override void OnAfterRender()
    {
        Console.WriteLine("OnAfterRender");
        scatterChartJs.Reload();

        _dataSetDisplay.OnUpdatedDataSetsStr += (dataSetsStr) =>
        {
            scatterChartConfig.Data.Datasets = JsonConvert.DeserializeObject<List<ScatterConfigDataset>>(dataSetsStr);
            scatterChartJs.Reload();
        };
    }

    public void UpdateChart()
    {
        //Update existing dataset

        scatterChartConfig.Data.Datasets.ForEach(dataset => { dataset.Data.Add(PointUtil.NewRandPoint(-10, 10, -10, 10)); });

        scatterChartJs.Reload();
    }

    protected override Task OnInitAsync()
    {
        Console.WriteLine("OnInitAsync");
        return Task.CompletedTask;
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine("OnParameterSet");
    }

    protected override Task OnParametersSetAsync()
    {
        Console.WriteLine("OnParameterSetAsync");
        return Task.CompletedTask;
    }

    protected override bool ShouldRender()
    {
        Console.WriteLine("ShouldRender");
        return true;
    }

    protected override Task OnAfterRenderAsync()
    {
        Console.WriteLine("OnAfterRenderAsync");
        return Task.CompletedTask;
    }

}