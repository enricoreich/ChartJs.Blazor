@page "/DoughnutChart"
@using ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.ChartJS.Common.Legends
@using ChartJs.Blazor.ChartJS.DoughnutChart
@using ChartJs.Blazor.Util.Color
@using ChartJs.Blazor.Sample.Shared.Components
@using Newtonsoft.Json
@inherits Microsoft.AspNetCore.Components.ComponentBase

<h2>Doughnut Chart</h2>
<div class="row">
    <button class="btn btn-primary" onclick="@UpdateChart">Update Chart </button>
</div>
<ChartJsDoughnutChart ref="_doughnutChartJs" Config="@doughnutChartConfig" Width="600" Height="300" />

<DataSetDisplay ref="_dataSetDisplay" bind-DataSetsStr="@DataSetsStr" Width="600" Height="300" />

@functions{

    public DoughnutChartConfig doughnutChartConfig { get; set; }
    ChartJsDoughnutChart _doughnutChartJs;

    DataSetDisplay _dataSetDisplay;

    string DataSetsStr
    {
        get => JsonConvert.SerializeObject(doughnutChartConfig.Data.Datasets, Formatting.Indented);
        set
        {
            doughnutChartConfig.Data.Datasets = JsonConvert.DeserializeObject<List<DoughnutDataset>>(value);
            Console.WriteLine(JsonConvert.SerializeObject(doughnutChartConfig.Data.Datasets));
        }
    }

    protected override void OnInit()
    {
        doughnutChartConfig = doughnutChartConfig ?? new DoughnutChartConfig
        {
            CanvasId = "myFirstDoughnutChart",
            Options = new DoughnutOptions
            {
                Text = "Sample chart from Blazor",
                Animation = new DoughnutAnimation
                {
                    AnimateRotate = true,
                    AnimateScale = true
                },
                Display = true,
                Responsive = true,
                Legend = new ChartJS.Common.Legends.Legend { Position = LegendPosition.RIGHT.ToString() }
            },
            Data = new DoughnutData
            {
                Labels = new List<string> { "A", "B", "C", "D" },
                Datasets = new List<DoughnutDataset>
            {
                new DoughnutDataset
                {
                    BackgroundColor = new[] {"#ff6384", "#55ee84", "#4463ff", "#efefef"},
                    Label = "Light Red",
                    Data = new List<int> {1, 2, 3, 4},
                    BorderWidth = 0,
                    HoverBackgroundColor = new[] {"#ff6384", "#55ee84", "#4463ff", "#efefef"},
                    HoverBorderColor = new[] {"#ff6384", "#55ee84", "#4463ff", "#efefef"},
                    HoverBorderWidth = new[] {1, 1, 1, 1},
                    BorderColor = new[] {"#ffffff", "#ffffff", "#ffffff", "#ffffff"}
                }
            }
            }
        };
    }

    protected override void OnAfterRender()
    {
        Console.WriteLine("OnAfterRender");
        _doughnutChartJs.Reload();

        _dataSetDisplay.OnUpdatedDataSetsStr += (dataSetsStr) =>
        {
            doughnutChartConfig.Data.Datasets = JsonConvert.DeserializeObject<List<DoughnutDataset>>(dataSetsStr);
            _doughnutChartJs.Reload();
        };
    }

    public void UpdateChart()
    {
        var rand = new Random();

        var colors = new[]
        {
        ColorUtil.RandomColorString(),
        ColorUtil.RandomColorString(),
        ColorUtil.RandomColorString(),
        ColorUtil.RandomColorString()
    };
        var doughnutDataset = new DoughnutDataset
        {
            BackgroundColor = colors,
            Label = "Light Red",
            Data = new List<int> { rand.Next(10), rand.Next(10), rand.Next(10), rand.Next(10) },
            BorderWidth = 0,
            HoverBackgroundColor = colors,
            HoverBorderColor = colors,
            HoverBorderWidth = new[] { 1, 1, 1, 1 },
            BorderColor = new[] { "#ffffff", "#ffffff", "#ffffff", "#ffffff" },
        };

        doughnutChartConfig.Data.Datasets.Add(doughnutDataset);
        _doughnutChartJs.Reload();
    }

}